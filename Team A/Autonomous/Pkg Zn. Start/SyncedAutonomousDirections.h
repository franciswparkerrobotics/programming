#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTServo,  HTMotor)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     RightRear,     tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C1_2,     LeftRear,      tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     RightFront,    tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_2,     LeftFront,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_1,     hwShooter,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_2,     motorI,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C3_1,    LeftGoal,             tServoStandard)
#pragma config(Servo,  srvo_S1_C3_2,    RightGoal,            tServoStandard)
#pragma config(Servo,  srvo_S1_C3_3,    Dumper60,             tServoStandard)
#pragma config(Servo,  srvo_S1_C3_4,    Dumper30,             tServoStandard)
#pragma config(Servo,  srvo_S1_C3_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C3_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'R !!*//
// GOES FORWARD :)

//*!!Code automatically generated by 'R !!*//
// GOES FORWARD :)

//int rightp;
//int leftp;

void sallstop(void) {
		motor[RightFront] = 0;
		motor[LeftFront] = 0;
		motor [RightRear] = 0;
		motor [LeftRear] = 0;
	}



//Left Power Forward
int lpwr(int pwr){
if(nMotorEncoder[RightFront] > nMotorEncoder[LeftFront]){
	pwr += 1;
	return pwr;
}else if(nMotorEncoder[RightFront] < nMotorEncoder[LeftFront]){
	pwr -= 1;
}
return pwr;
}

//Right Power Forward
int rpwr(int pwr){
if(nMotorEncoder[LeftFront] > nMotorEncoder[RightFront]){
	pwr += 1;
	return pwr;
}else if(nMotorEncoder[RightFront] > nMotorEncoder[LeftFront]){
	pwr -= 1;
}
return pwr;
}

//Left Power Backwards
int lpwrb(int pwr){
if(nMotorEncoder[RightFront] < nMotorEncoder[LeftFront]){
	pwr -= 1;
	return pwr;
}else if(nMotorEncoder[RightFront] > nMotorEncoder[LeftFront]){
	pwr += 1;
}
return pwr;
}

//Right Power Backwards
int rpwrb(int pwr){
if(nMotorEncoder[LeftFront] < nMotorEncoder[RightFront]){
	pwr += 1;
	return pwr;
}else if(nMotorEncoder[RightFront] < nMotorEncoder[LeftFront]){
	pwr -= 1;
}
return pwr;
}

void sforward(int pwr,int rotations){
	int rightp = pwr;
	int leftp = pwr;
	//nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftRear] = 0;
	nMotorEncoder[RightRear] = 0;
	//nMotorEncoder[LeftFront] = 0;
	bMotorReflected[RightFront] = false;
	bMotorReflected[LeftFront] = true;
	bMotorReflected[RightRear] = false;
	bMotorReflected[LeftRear] = true;
	while(nMotorEncoder[RightFront] <= rotations && nMotorEncoder[LeftFront] <= rotations){
		leftp = lpwr(leftp);
		rightp = rpwr(rightp);
		motor[LeftFront] = leftp;
		motor[RightFront] = rightp;
		motor[RightRear] = rightp;
		motor[LeftRear] = leftp;
		wait10Msec(8);
	}
	sallstop();
}
//int globalA;
//int globalB;
// GOES BACKWARD (:
void sbackward(int pwr,int rotations){
	int rightp = pwr;
	int leftp = pwr;
	nMotorEncoder[RightRear] = 0;
	nMotorEncoder[LeftFront] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftRear] = 0;
	bMotorReflected[RightFront] = true;
	bMotorReflected[LeftFront] = false;
	bMotorReflected[RightRear] = true;
	bMotorReflected[LeftRear] = false;
		while(nMotorEncoder[RightFront] <= rotations && nMotorEncoder[LeftFront] <= rotations){
		leftp = lpwrb(leftp);
		rightp = rpwrb(rightp);
		//globalA = nMotorEncoder[RightFront];
		//globalB = nMotorEncoder[LeftFront];
		motor[LeftFront] = leftp;
		motor[RightFront] = rightp;
		motor[RightRear] = rightp;
		motor[LeftRear] = leftp;
		wait10Msec(8);
}
sallstop();
	}
// TURNS RIGHT >.>
void sturnright(int pwr,int rotations){
	int rightp = pwr;
	int leftp = pwr;
	nMotorEncoder[RightRear] = 0;
	nMotorEncoder[LeftFront] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftRear] = 0;
	bMotorReflected[RightFront] = true;
	bMotorReflected[LeftFront] = true;
	bMotorReflected[RightRear] = true;
	bMotorReflected[LeftRear] = true;
	while(nMotorEncoder[RightFront] <= rotations && nMotorEncoder[LeftFront] <= rotations){
		leftp = lpwr(leftp);
		rightp = rpwr(rightp);
		motor[LeftFront] = leftp;
		motor[RightFront] = rightp;
		motor[RightRear] = rightp;
		motor[LeftRear] = leftp;
		wait10Msec(8);

	}
	sallstop();
}
//TURNS LEFT <.<
void sturnleft(int pwr,int rotations){
	int rightp = pwr;
	int leftp = pwr;
	nMotorEncoder[RightRear] = 0;
	nMotorEncoder[LeftFront] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftRear] = 0;
	bMotorReflected[RightFront] = false;
	bMotorReflected[LeftFront] = false;
	bMotorReflected[RightRear] = false;
	bMotorReflected[LeftRear] = false;
	while(nMotorEncoder[RightFront] <= rotations && nMotorEncoder[LeftFront] <= rotations){
		leftp = lpwr(leftp);
		rightp = rpwr(rightp);
		motor[LeftFront] = leftp;
		motor[RightFront] = rightp;
		motor[RightRear] = rightp;
		motor[LeftRear] = leftp;
		wait10Msec(8);

	}
	sallstop();
}
//movesright

void smoveright (int pwr, int rotations) {
	int rightp = pwr;
	int leftp = pwr;
  nMotorEncoder[RightRear] = 0;
	nMotorEncoder[LeftFront] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftRear] = 0;
	bMotorReflected[RightFront] = true;
	bMotorReflected[LeftFront] = true;
	bMotorReflected[RightRear] = false;
	bMotorReflected[LeftRear] = false;
	while(nMotorEncoder[RightFront] <= rotations && nMotorEncoder[LeftFront] <= rotations){
		leftp = lpwr(leftp);
		rightp = rpwr(rightp);
		motor[LeftFront] = leftp;
		motor[RightFront] = rightp;
		motor[RightRear] = rightp;
		motor[LeftRear] = leftp;
		wait10Msec(8);

	}
	sallstop();
}

void smoveleft (int pwr, int rotations) {
	int rightp = pwr;
	int leftp = pwr;
	nMotorEncoder[RightRear] = 0;
	nMotorEncoder[LeftFront] = 0;
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftRear] = 0;
	bMotorReflected[RightFront] = false;
	bMotorReflected[LeftFront] = false;
	bMotorReflected[RightRear] = true;
	bMotorReflected[LeftRear] = true;
	while(nMotorEncoder[RightFront] <= rotations && nMotorEncoder[LeftFront] <= rotations){
		leftp = lpwr(leftp);
		rightp = rpwr(rightp);
		motor[LeftFront] = leftp;
		motor[RightFront] = rightp;
		motor[RightRear] = rightp;
		motor[LeftRear] = leftp;
		wait10Msec(8);

	}
	sallstop();
}
