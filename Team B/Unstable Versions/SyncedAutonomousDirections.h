#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     HTIRS2A,        sensorI2CCustom)
#pragma config(Sensor, S4,     HTIRS2B,        sensorI2CCustom)
#pragma config(Motor,  mtr_S1_C1_1,     RightRear,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     LeftRear,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     RightFront,      tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     LeftFront,     tmotorTetrix, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
// GOES FORWARD :)
void movemotors (int pwr, int rotations){
	nMotorEncoder[RightFront] = 0;
	nMotorEncoder[LeftFront] = 0;
	int radj=0;
	int ladj=0;
	while((nMotorEncoder[RightFront] <= rotations)){
		if(nMotorEncoder[RightFront] < nMotorEncoder[LeftFront]){
			radj+=1;ladj-=1;}
		else if(nMotorEncoder[RightFront] < nMotorEncoder[LeftFront]){
			radj-=1;ladj+=1;}
		motor[RightFront] = pwr+radj;
		motor[LeftFront] = pwr+ladj;
		motor[RightRear] = pwr;
		motor[LeftRear] = pwr;
	}
}
void forward(int pwr,int rotations){
	bMotorReflected[RightFront] = false;
	bMotorReflected[LeftFront] = true;
	bMotorReflected[RightRear] = false;
	bMotorReflected[LeftRear] = true;
	movemotors(pwr,rotations);
}
// GOES BACKWARD (:
void backward(int pwr,int rotations){
	bMotorReflected[RightFront] = true;
	bMotorReflected[LeftFront] = false;
	bMotorReflected[RightRear] = true;
	bMotorReflected[LeftRear] = false;
	movemotors(pwr,rotations);
}
// TURNS RIGHT >.>
void turnright(int pwr,int rotations){
	bMotorReflected[RightFront] = true;
	bMotorReflected[LeftFront] = true;
	bMotorReflected[RightRear] = true;
	bMotorReflected[LeftRear] = true;
	movemotors(pwr,rotations);
}
//TURNS LEFT <.<
void turnleft(int pwr,int rotations){
	bMotorReflected[RightFront] = false;
	bMotorReflected[LeftFront] = false;
	bMotorReflected[RightRear] = false;
	bMotorReflected[LeftRear] = false;
  movemotors(pwr,rotations);
}
//movesright

void moveright (int pwr, int rotations) {
	bMotorReflected[RightFront] = true;
	bMotorReflected[LeftFront] = true;
	bMotorReflected[RightRear] = false;
	bMotorReflected[LeftRear] = false;
	movemotors(pwr,rotations);
}

void moveleft (int pwr, int rotations) {
	bMotorReflected[RightFront] = false;
	bMotorReflected[LeftFront] = false;
	bMotorReflected[RightRear] = true;
	bMotorReflected[LeftRear] = true;
	movemotors(pwr,rotations);
}

void allstop (void) {
		motor[RightFront] = 0;
		motor[LeftFront] = 0;
		motor [RightRear] = 0;
		motor [LeftRear] = 0;
	}
	//THIS MAY NOT WORK
void offramp (void) {
forward(100,2400);
turnright(100,1200);
}
