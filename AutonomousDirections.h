#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     rightfront,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     leftfront,     tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_1,     rightrear,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     leftrear,      tmotorTetrix, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void forward(int pwr,int rotations){
	nMotorEncoder[rightfront] = 0;
	bMotorReflected[rightfront] = false;
	bMotorReflected[leftfront] = false;
	bMotorReflected[rightrear] = false;
	bMotorReflected[leftrear] = false;
	while(nMotorEncoder[rightfront] <= rotations){
		motor[rightfront] = pwr;
		motor[leftfront] = pwr;
		motor[rightrear] = pwr;
		motor[leftrear] = pwr;
	}
}
void backward(int pwr,int rotations){
	nMotorEncoder[rightfront] = 0;
	bMotorReflected[rightfront] = true;
	bMotorReflected[leftfront] = true;
	bMotorReflected[rightrear] = true;
	bMotorReflected[leftrear] = true;
	while(nMotorEncoder[rightfront] <= rotations){
		motor[rightfront] = pwr;
		motor[leftfront] = pwr;
		motor[rightrear] = pwr;
		motor[leftrear] = pwr;
	}
}
void turnright(int pwr,int rotations){
	nMotorEncoder[rightfront] = 0;
	bMotorReflected[rightfront] = false;
	bMotorReflected[leftfront] = true;
	bMotorReflected[rightrear] = true;
	bMotorReflected[leftrear] = false;
	while(nMotorEncoder[rightfront] <= rotations){
		motor[rightfront] = pwr;
		motor[leftfront] = pwr;
		motor[rightrear] = pwr;
		motor[leftrear] = pwr;
	}
}
void turnleft(int pwr,int rotations){
	nMotorEncoder[leftfront] = 0;
	bMotorReflected[rightfront] = true;
	bMotorReflected[leftfront] = false;
	bMotorReflected[rightrear] = false;
	bMotorReflected[leftrear] = true;
	while(nMotorEncoder[leftfront] <= rotations){
		motor[rightfront] = pwr;
		motor[leftfront] = pwr;
		motor[rightrear] = pwr;
		motor[leftrear] = pwr;
	}
}
